% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/yf_get_data.R
\name{yf_get_data}
\alias{yf_get_data}
\title{Function to download financial data}
\usage{
yf_get_data(
  tickers,
  first_date = Sys.Date() - 30,
  last_date = Sys.Date(),
  thresh_bad_data = 0.75,
  bench_ticker = "^GSPC",
  type_return = "arit",
  freq_data = "daily",
  how_to_aggregate = "last",
  do_complete_data = FALSE,
  do_fill_missing_prices = TRUE,
  do_cache = TRUE,
  cache_folder = yf_get_default_cache_folder(),
  do_parallel = FALSE,
  be_quiet = FALSE
)
}
\arguments{
\item{tickers}{A vector of tickers. If not sure whether the ticker is available, check the websites of google and yahoo finance. The source for downloading
the data can either be Google or Yahoo. The function automatically selects the source webpage based on the input ticker.}

\item{first_date}{The first date to download data (date or char as YYYY-MM-DD)}

\item{last_date}{The last date to download data (date or char as YYYY-MM-DD)}

\item{thresh_bad_data}{A percentage threshold for defining bad data. The dates of the benchmark ticker are compared to each asset. If the percentage of non-missing dates
with respect to the benchmark ticker is lower than thresh_bad_data, the function will ignore the asset (default = 0.75)}

\item{bench_ticker}{The ticker of the benchmark asset used to compare dates. My suggestion is to use the main stock index of the market from where the data is coming from (default = ^GSPC (SP500, US market))}

\item{type_return}{Type of price return to calculate: 'arit' (default) - aritmetic, 'log' - log returns.}

\item{freq_data}{Frequency of financial data ('daily', 'weekly', 'monthly', 'yearly')}

\item{how_to_aggregate}{Defines whether to aggregate the data using the first observations of the aggregating period or last ('first', 'last').
For example, if freq_data = 'yearly' and how_to_aggregate = 'last', the last available day of the year will be used for all
aggregated values such as price_adjusted.}

\item{do_complete_data}{Return a complete/balanced dataset? If TRUE, all missing pairs of ticker-date will be replaced by NA or closest price (see input do_fill_missing_prices). Default = FALSE.}

\item{do_fill_missing_prices}{Finds all missing prices and replaces them by their closest price with preference for the previous price. This ensures a balanced dataset for all assets, without any NA. Default = TRUE.}

\item{do_cache}{Use cache system? (default = TRUE)}

\item{cache_folder}{Where to save cache files? (default = file.path(tempdir(), 'BGS_Cache') )}

\item{do_parallel}{Flag for using parallel or not (default = FALSE). Before using parallel, make sure you call function future::plan() first.}

\item{be_quiet}{Logical for printing statements (default = FALSE)}
}
\value{
A dataframe with stock prices.
}
\description{
This function downloads financial data from Yahoo Finance. Based on a set of tickers and a time period, the function will download the data for each ticker and return a report of the process, along with the actual data in the long dataframe format.
The main advantage of the function is that it automatically recognizes the source of the dataset from the ticker and structures the resulting data from different sources in the long format.
A caching system is also available, making it very fast.
}
\section{Warning}{


Be aware that when using cache system in a local folder (and not the default tempdir()), the aggregate prices series might not match if
a split or dividends event happens in between cache files.
}

\examples{
tickers <- c("FB", "MMM")

first_date <- Sys.Date() - 15
last_date <- Sys.Date()

df_yf <- yf_get_data(
  tickers = tickers,
  first_date = first_date,
  last_date = last_date,
  do_cache = FALSE
)

print(df_yf)
}
